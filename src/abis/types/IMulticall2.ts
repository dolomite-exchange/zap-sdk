/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Provider } from "@ethersproject/providers";

export declare namespace IMulticall2 {
  export type CallStruct = { target: string; callData: BytesLike };

  export type CallStructOutput = [string, string] & {
    target: string;
    callData: string;
  };

  export type ResultStruct = { success: boolean; returnData: BytesLike };

  export type ResultStructOutput = [boolean, string] & {
    success: boolean;
    returnData: string;
  };
}

export interface IMulticall2Interface extends utils.Interface {
  functions: {
    "aggregate((address,bytes)[])": FunctionFragment;
    "tryAggregate(bool,(address,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "aggregate" | "tryAggregate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregate",
    values: [IMulticall2.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryAggregate",
    values: [boolean, IMulticall2.CallStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tryAggregate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMulticall2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMulticall2Interface;

  functions: {
    aggregate(
      calls: IMulticall2.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tryAggregate(
      _requireSuccess: boolean,
      calls: IMulticall2.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  aggregate(
    calls: IMulticall2.CallStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tryAggregate(
    _requireSuccess: boolean,
    calls: IMulticall2.CallStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    aggregate(
      calls: IMulticall2.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    tryAggregate(
      _requireSuccess: boolean,
      calls: IMulticall2.CallStruct[],
      overrides?: CallOverrides
    ): Promise<IMulticall2.ResultStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    aggregate(
      calls: IMulticall2.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tryAggregate(
      _requireSuccess: boolean,
      calls: IMulticall2.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregate(
      calls: IMulticall2.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tryAggregate(
      _requireSuccess: boolean,
      calls: IMulticall2.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
