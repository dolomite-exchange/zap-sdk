/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Provider } from "@ethersproject/providers";

export interface IGlvRegistryInterface extends utils.Interface {
  functions: {
    "callbackGasLimit()": FunctionFragment;
    "dolomiteRegistry()": FunctionFragment;
    "getUnwrapperByToken(address)": FunctionFragment;
    "getWrapperByToken(address)": FunctionFragment;
    "glvHandler()": FunctionFragment;
    "glvReader()": FunctionFragment;
    "glvRouter()": FunctionFragment;
    "glvTokenToGmMarketForDeposit(address)": FunctionFragment;
    "glvTokenToGmMarketForWithdrawal(address)": FunctionFragment;
    "glvVault()": FunctionFragment;
    "gmxDataStore()": FunctionFragment;
    "gmxExchangeRouter()": FunctionFragment;
    "gmxReader()": FunctionFragment;
    "handlerSetGlvTokenToGmMarketForDeposit(address,address)": FunctionFragment;
    "handlerSetGlvTokenToGmMarketForWithdrawal(address,address)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "ownerSetCallbackGasLimit(uint256)": FunctionFragment;
    "ownerSetDolomiteRegistry(address)": FunctionFragment;
    "ownerSetGlvHandler(address)": FunctionFragment;
    "ownerSetGlvReader(address)": FunctionFragment;
    "ownerSetGlvRouter(address)": FunctionFragment;
    "ownerSetGlvTokenToGmMarketForDeposit(address,address)": FunctionFragment;
    "ownerSetGlvTokenToGmMarketForWithdrawal(address,address)": FunctionFragment;
    "ownerSetGlvVault(address)": FunctionFragment;
    "ownerSetGmxDataStore(address)": FunctionFragment;
    "ownerSetGmxExchangeRouter(address)": FunctionFragment;
    "ownerSetGmxReader(address)": FunctionFragment;
    "ownerSetIsHandler(address,bool)": FunctionFragment;
    "ownerSetUnwrapperByToken(address,address)": FunctionFragment;
    "ownerSetWrapperByToken(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "callbackGasLimit"
      | "dolomiteRegistry"
      | "getUnwrapperByToken"
      | "getWrapperByToken"
      | "glvHandler"
      | "glvReader"
      | "glvRouter"
      | "glvTokenToGmMarketForDeposit"
      | "glvTokenToGmMarketForWithdrawal"
      | "glvVault"
      | "gmxDataStore"
      | "gmxExchangeRouter"
      | "gmxReader"
      | "handlerSetGlvTokenToGmMarketForDeposit"
      | "handlerSetGlvTokenToGmMarketForWithdrawal"
      | "isHandler"
      | "ownerSetCallbackGasLimit"
      | "ownerSetDolomiteRegistry"
      | "ownerSetGlvHandler"
      | "ownerSetGlvReader"
      | "ownerSetGlvRouter"
      | "ownerSetGlvTokenToGmMarketForDeposit"
      | "ownerSetGlvTokenToGmMarketForWithdrawal"
      | "ownerSetGlvVault"
      | "ownerSetGmxDataStore"
      | "ownerSetGmxExchangeRouter"
      | "ownerSetGmxReader"
      | "ownerSetIsHandler"
      | "ownerSetUnwrapperByToken"
      | "ownerSetWrapperByToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dolomiteRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnwrapperByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrapperByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "glvHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "glvReader", values?: undefined): string;
  encodeFunctionData(functionFragment: "glvRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "glvTokenToGmMarketForDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "glvTokenToGmMarketForWithdrawal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "glvVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gmxDataStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gmxExchangeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gmxReader", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handlerSetGlvTokenToGmMarketForDeposit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "handlerSetGlvTokenToGmMarketForWithdrawal",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerSetCallbackGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetDolomiteRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlvHandler",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlvReader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlvRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlvTokenToGmMarketForDeposit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlvTokenToGmMarketForWithdrawal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlvVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGmxDataStore",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGmxExchangeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGmxReader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetIsHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetUnwrapperByToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetWrapperByToken",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnwrapperByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrapperByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glvHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "glvReader", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "glvRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "glvTokenToGmMarketForDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "glvTokenToGmMarketForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glvVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gmxDataStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gmxExchangeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmxReader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handlerSetGlvTokenToGmMarketForDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerSetGlvTokenToGmMarketForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetDolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlvHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlvReader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlvRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlvTokenToGmMarketForDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlvTokenToGmMarketForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlvVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGmxDataStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGmxExchangeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGmxReader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetIsHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetUnwrapperByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetWrapperByToken",
    data: BytesLike
  ): Result;

  events: {
    "CallbackGasLimitSet(uint256)": EventFragment;
    "DolomiteRegistrySet(address)": EventFragment;
    "GlvHandlerSet(address)": EventFragment;
    "GlvReaderSet(address)": EventFragment;
    "GlvRouterSet(address)": EventFragment;
    "GlvTokenToGmMarketSet(address,address)": EventFragment;
    "GlvVaultSet(address)": EventFragment;
    "GmxDataStoreSet(address)": EventFragment;
    "GmxExchangeRouterSet(address)": EventFragment;
    "GmxReaderSet(address)": EventFragment;
    "HandlerSet(address,bool)": EventFragment;
    "UnwrapperTraderSet(address,address)": EventFragment;
    "WrapperTraderSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallbackGasLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DolomiteRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlvHandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlvReaderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlvRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlvTokenToGmMarketSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlvVaultSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GmxDataStoreSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GmxExchangeRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GmxReaderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnwrapperTraderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrapperTraderSet"): EventFragment;
}

export interface IGlvRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGlvRegistryInterface;

  functions: {
    callbackGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<[string]>;

    getUnwrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    glvHandler(overrides?: CallOverrides): Promise<[string]>;

    glvReader(overrides?: CallOverrides): Promise<[string]>;

    glvRouter(overrides?: CallOverrides): Promise<[string]>;

    glvTokenToGmMarketForDeposit(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    glvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    glvVault(overrides?: CallOverrides): Promise<[string]>;

    gmxDataStore(overrides?: CallOverrides): Promise<[string]>;

    gmxExchangeRouter(overrides?: CallOverrides): Promise<[string]>;

    gmxReader(overrides?: CallOverrides): Promise<[string]>;

    handlerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    handlerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<[boolean]>;

    ownerSetCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlvHandler(
      _glvHandler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlvReader(
      _glvReader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlvRouter(
      _glvRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlvVault(
      _glvVault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGmxDataStore(
      _gmxDataStore: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGmxExchangeRouter(
      _gmxExchangeRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGmxReader(
      _gmxReader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetIsHandler(
      _handler: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetUnwrapperByToken(
      _factoryToken: string,
      _unwrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetWrapperByToken(
      _factoryToken: string,
      _wrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

  getUnwrapperByToken(
    _factoryToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getWrapperByToken(
    _factoryToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  glvHandler(overrides?: CallOverrides): Promise<string>;

  glvReader(overrides?: CallOverrides): Promise<string>;

  glvRouter(overrides?: CallOverrides): Promise<string>;

  glvTokenToGmMarketForDeposit(
    _glvToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  glvTokenToGmMarketForWithdrawal(
    _glvToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  glvVault(overrides?: CallOverrides): Promise<string>;

  gmxDataStore(overrides?: CallOverrides): Promise<string>;

  gmxExchangeRouter(overrides?: CallOverrides): Promise<string>;

  gmxReader(overrides?: CallOverrides): Promise<string>;

  handlerSetGlvTokenToGmMarketForDeposit(
    _glvToken: string,
    _gmMarket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  handlerSetGlvTokenToGmMarketForWithdrawal(
    _glvToken: string,
    _gmMarket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

  ownerSetCallbackGasLimit(
    _callbackGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetDolomiteRegistry(
    _dolomiteRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlvHandler(
    _glvHandler: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlvReader(
    _glvReader: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlvRouter(
    _glvRouter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlvTokenToGmMarketForDeposit(
    _glvToken: string,
    _gmMarket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlvTokenToGmMarketForWithdrawal(
    _glvToken: string,
    _gmMarket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlvVault(
    _glvVault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGmxDataStore(
    _gmxDataStore: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGmxExchangeRouter(
    _gmxExchangeRouter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGmxReader(
    _gmxReader: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetIsHandler(
    _handler: string,
    _isTrusted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetUnwrapperByToken(
    _factoryToken: string,
    _unwrapperTrader: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetWrapperByToken(
    _factoryToken: string,
    _wrapperTrader: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

    getUnwrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getWrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    glvHandler(overrides?: CallOverrides): Promise<string>;

    glvReader(overrides?: CallOverrides): Promise<string>;

    glvRouter(overrides?: CallOverrides): Promise<string>;

    glvTokenToGmMarketForDeposit(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    glvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    glvVault(overrides?: CallOverrides): Promise<string>;

    gmxDataStore(overrides?: CallOverrides): Promise<string>;

    gmxExchangeRouter(overrides?: CallOverrides): Promise<string>;

    gmxReader(overrides?: CallOverrides): Promise<string>;

    handlerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handlerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

    ownerSetCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlvHandler(
      _glvHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlvReader(
      _glvReader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlvRouter(
      _glvRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlvVault(
      _glvVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGmxDataStore(
      _gmxDataStore: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGmxExchangeRouter(
      _gmxExchangeRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGmxReader(
      _gmxReader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetIsHandler(
      _handler: string,
      _isTrusted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetUnwrapperByToken(
      _factoryToken: string,
      _unwrapperTrader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetWrapperByToken(
      _factoryToken: string,
      _wrapperTrader: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  estimateGas: {
    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getUnwrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    glvHandler(overrides?: CallOverrides): Promise<BigNumber>;

    glvReader(overrides?: CallOverrides): Promise<BigNumber>;

    glvRouter(overrides?: CallOverrides): Promise<BigNumber>;

    glvTokenToGmMarketForDeposit(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    glvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    glvVault(overrides?: CallOverrides): Promise<BigNumber>;

    gmxDataStore(overrides?: CallOverrides): Promise<BigNumber>;

    gmxExchangeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    gmxReader(overrides?: CallOverrides): Promise<BigNumber>;

    handlerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    handlerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlvHandler(
      _glvHandler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlvReader(
      _glvReader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlvRouter(
      _glvRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlvVault(
      _glvVault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGmxDataStore(
      _gmxDataStore: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGmxExchangeRouter(
      _gmxExchangeRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGmxReader(
      _gmxReader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetIsHandler(
      _handler: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetUnwrapperByToken(
      _factoryToken: string,
      _unwrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetWrapperByToken(
      _factoryToken: string,
      _wrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callbackGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnwrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWrapperByToken(
      _factoryToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    glvHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glvReader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glvRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glvTokenToGmMarketForDeposit(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    glvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    glvVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxDataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxExchangeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxReader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handlerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    handlerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isHandler(
      _handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlvHandler(
      _glvHandler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlvReader(
      _glvReader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlvRouter(
      _glvRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlvTokenToGmMarketForDeposit(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlvTokenToGmMarketForWithdrawal(
      _glvToken: string,
      _gmMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlvVault(
      _glvVault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGmxDataStore(
      _gmxDataStore: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGmxExchangeRouter(
      _gmxExchangeRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGmxReader(
      _gmxReader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetIsHandler(
      _handler: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetUnwrapperByToken(
      _factoryToken: string,
      _unwrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetWrapperByToken(
      _factoryToken: string,
      _wrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
